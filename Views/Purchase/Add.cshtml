@* <form method="post" enctype="multipart/form-data"> *@
@* form use garinam kina bhane list of purchaseDetails lai handle(index maintain) garna garho huncha so form use
nagareko *@
@* asp-for includes id, class.... *@

@model eKirana.ViewModels.PurchaseVms.PurchaseFormAddVm
<div class="container mt-4">
    <div class="card shadow-lg">
        <div class="card-header">
            <h4 class="card-title text-center text-success text-uppercase">Making Purchase</h4>
        </div>
        <div class="card-body">
            <div style="border-top: 4px solid;" class="mb-2 border-success">
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="Supplier" class="form-label">Supplier</label>
                    <select class="form-control" asp-for="SupplierId" asp-items="Model.SupplierSelectList()"
                        id="SupplierId">
                        <option value="">-- SELECT A SUPPLIER --</option>
                    </select>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="PurchaseDate" class="form-label">Purchase Date</label>
                    <input type="date" class="form-control" asp-for="PurchaseDate" id="PurchaseDate" required>
                </div>
            </div>
            <div style="border-top: 4px solid;" class="mb-2 border-success">
            </div>
            <fieldset id="fieldSet" disabled>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="Product" class="form-label">Product</label>
                        <select class="form-control" asp-for="ProductId" asp-items="Model.ProductSelectList()">
                            <option value="">-- SELECT A PRODUCT --</option>
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="Quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="f_quantity" required>
                    </div>
                    @* <div class="col-md-3 mb-3">
                    <input type="hidden" class="form-control" id="f_basequantity" required>
                    </div> yo tarika le frontendmai api call garera baseunit convert garna pani sakinthyo*@

                    <div class="col-md-3 mb-3">
                        <label for="Unit" class="form-label">Unit</label>
                        <select class="form-control" asp-for="UnitId">
                            @* <option value="">-- SELECT A UNIT --</option> *@
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="Rate" class="form-label">Rate</label>
                        <input type="decimal" class="form-control" id="f_rate" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="SubTotal" class="form-label">Sub Total</label>
                        <input type="decimal" class="form-control" id="f_subTotal" required>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="VATAmount" class="form-label">VAT Amount</label>
                        <input type="decimal" class="form-control" id="f_vatAmt" step="0.01" required>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="Discount" class="form-label">Discount</label>
                        <input type="decimal" class="form-control" id="f_disAmt" required>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="NetAmount" class="form-label">Net Amount</label>
                        <input type="decimal" class="form-control" id="f_netAmt" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-success" id="Add" type="button">Add Product</button>
                    </div>
                </div>
            </fieldset>
            <div style="border-top: 4px solid;" class="mb-2 border-success">
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-sm border-1 table-striped">
                    <thead class="table-success text-center">
                        <tr>
                            <th scope="col" width="80px">SN</th>
                            <th scope="col">Product</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Unit</th>
                            <th scope="col">Rate</th>
                            <th scope="col">Sub Total</th>
                            <th scope="col">VAT</th>
                            <th scope="col">Discount</th>
                            <th scope="col">Net Amount</th>


                            <th scope="col" class="text-end"></th>
                        </tr>
                    </thead>
                    <tbody id="item_list">

                    </tbody>
                </table>
            </div>
            <div class="">
                <template id="item_row">
                    <tr class="table-light text-center">
                        <td>
                            <span class="i_sn"></span>
                        </td>
                        <td>
                            <span class="i_product"></span>
                            <span class="i_data_hub" data-product-id="" data-quantity="" data-unit-id="" data-rate=""
                                data-subTotal="" data-vat="" data-dis="" data-netAmt=""></span>
                        </td>
                        <td>
                            <span class="i_quantity"></span>
                        </td>
                        <td>
                            <span class="i_unit"></span>
                        </td>
                        <td>
                            <span class="i_rate"></span>
                        </td>
                        <td>
                            <span class="i_subTotal"></span>
                        </td>
                        <td>
                            <span class="i_vatAmt"></span>
                        </td>
                        <td>
                            <span class="i_disAmt"></span>
                        </td>
                        <td>
                            <span class="i_netAmt"></span>
                        </td>
                        <td>
                            <button class="btn btn-danger i_remove">
                                Remove
                            </button>
                        </td>

                    </tr>

                </template>

            </div>
        </div>


        <div class="card-footer">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-success w-100" id="checkout">Check Out</button>
            </div>
        </div>
    </div>
</div>

<script>
    var sn = 0;

    //marking or mapping section
    const addBtn = document.querySelector('#Add');
    const templateRowElm = document.querySelector('#item_row');
    const itemListElm = document.querySelector('#item_list');
    const removeBtn = document.querySelector('#remove');
    const checkoutBtn = document.querySelector('#checkout');

    const supplierElm = document.querySelector('#SupplierId');
    const purchaseDateElm = document.querySelector('#PurchaseDate');
    const fieldSet = document.querySelector('#fieldSet');

    //--adding row(inputed data) to the list
    const rowElms = {
        product: document.querySelector('#ProductId'),
        quantity: document.querySelector('#f_quantity'),
        unit: document.querySelector('#UnitId'),
        rate: document.querySelector('#f_rate'),
        subTotal: document.querySelector('#f_subTotal'),
        vatAmt: document.querySelector('#f_vatAmt'),
        disAmt: document.querySelector('#f_disAmt'),
        netAmt: document.querySelector('#f_netAmt'),
    };


    // Not needed
    // rowElms.product.addEventListener('change', getRateAmt);
    //change event on select list
    //input event on input type
    //make separate function for each event as far as possible
    supplierElm.addEventListener('change', toggleFieldSet);
    rowElms.product.addEventListener('change', getUnitSelectList);
    rowElms.unit.addEventListener('change', getRateAmt);
    rowElms.rate.addEventListener('input', updateRowElmAmt);
    rowElms.quantity.addEventListener('input', updateRowElmAmt);

    function toggleFieldSet() {
        const supplierId = supplierElm.value;
        //console.log(supplierId);
        if (!supplierId) {
            //alert("Input the supplier.");
            fieldSet.disabled = true;
        }
        else {
            fieldSet.disabled = false;

        }

    }

    function getUnitSelectList() {
        const productId = rowElms.product.value;


        if (productId) {
            supplierElm.disabled = true;
            purchaseDateElm.disabled = true; //or readonly
        }

        fetch("/ProductQuantityUnitRate/GetUnitSelectList?ProductId=" + productId)
            .then(res => res.json())
            .then(data => {
                // Clear previous select options
                rowElms.unit.innerHTML = '';
                // while(selectElm.HasChildren) => selectElm.children[0].remove();
                const emptyOption = document.createElement("option");
                emptyOption.value = ""; // Set the value of the empty option
                emptyOption.text = "- SELECT A UNIT -"; // Text to display for the empty option
                rowElms.unit.appendChild(emptyOption);

                for (var item of data.prdQURs) {
                    const option = new Option(item.unit.name, item.unit.id);
                    rowElms.unit.appendChild(option);
                    rowElms.unit.dispatchEvent(new Event('change'));
                }
            });

    }

    function getRateAmt() {
        const productId = rowElms.product.value;
        const unitId = rowElms.unit.value;

        if (!unitId) {
            rowElms.rate.value = 0;
            return;
        }

        // another syntax: fetch("/Purchase/GetProductPurchaseRate?ProductId=${productId}&UnitId=${unitId}").
        fetch("/Purchase/GetProductPurchaseRate?ProductId=" + productId + "&UnitId=" + unitId).then(res => res.json())
            .then(data => {
                rowElms.rate.value = data.purchaseRate;
                previousRateInput = +rowElms.rate.value;
                rowElms.rate.dispatchEvent(new Event('input'));
                //previousRateInput.dispatchEvent(new Event('input'));
            });

    };


    function updateRowElmAmt() {
        const currentRateInput = +rowElms.rate.value.trim();

        rowElms.subTotal.value = +rowElms.quantity.value * currentRateInput;
        rowElms.vatAmt.value = +rowElms.subTotal.value * 0.13;  //vat% ra dis% ni fetch garne[new update]
        rowElms.disAmt.value = 0.1 * +rowElms.subTotal.value;
        rowElms.netAmt.value = +rowElms.subTotal.value + +rowElms.vatAmt.value - +rowElms.disAmt.value;
    }


    addBtn.addEventListener('click', e => {
        e.preventDefault();
        try {
            sn = sn + 1;
            //getting value
            const productId = rowElms.product.value;
            if (!productId) throw "Product Not Selected.";
            const quantity = +rowElms.quantity.value;
            if (quantity <= 0) throw "Quantity must be positive.";
            const unitId = rowElms.unit.value;
            if (!unitId) throw "Unit Not Selected.";
            const rate = +rowElms.rate.value;
            const subTotal = +rowElms.subTotal.value;
            const vatAmt = +rowElms.vatAmt.value;
            const disAmt = +rowElms.disAmt.value;
            const netAmt = +rowElms.netAmt.value;

            //getting selected names
            const productName = rowElms.product.options[rowElms.product.selectedIndex].textContent;
            const unitName = rowElms.unit.options[rowElms.unit.selectedIndex].textContent;

            //for cloning row 
            const cloned = templateRowElm.content.cloneNode(true);
            cloned.querySelector(".i_sn").textContent = sn;
            cloned.querySelector(".i_product").textContent = productName;
            cloned.querySelector(".i_quantity").textContent = quantity;
            cloned.querySelector(".i_unit").textContent = unitName;
            cloned.querySelector(".i_rate").textContent = rate;
            cloned.querySelector(".i_subTotal").textContent = subTotal;
            cloned.querySelector(".i_disAmt").textContent = disAmt;
            cloned.querySelector(".i_vatAmt").textContent = vatAmt;
            cloned.querySelector(".i_netAmt").textContent = netAmt;

            //for marking i_data_hub and storing entire data of row in dataset
            const dataHubElm = cloned.querySelector('.i_data_hub');
            dataHubElm.dataset.productId = productId;
            dataHubElm.dataset.quantity = quantity;
            dataHubElm.dataset.unitId = unitId;
            dataHubElm.dataset.rate = rate;
            dataHubElm.dataset.subTotal = subTotal;
            dataHubElm.dataset.vat = vatAmt;
            dataHubElm.dataset.dis = disAmt;
            dataHubElm.dataset.netAmt = netAmt;

            itemListElm.appendChild(cloned);

            rowElms.product.value = '';
            rowElms.quantity.value = 0;
            rowElms.unit.value = '';
            rowElms.rate.value = 0;
            rowElms.subTotal.value = 0;
            rowElms.vatAmt.value = 0;
            rowElms.disAmt.value = 0;
            rowElms.netAmt.value = 0;
        }

        catch (e) {
            alert(e);
        }

    });

    checkoutBtn.addEventListener('click', e => {
        const userAck = confirm('Are you sure You want to submit?');
        if (!userAck) return;

        const data = [];

        const dataHubElms = document.querySelectorAll('.i_data_hub');

        for (const elm of dataHubElms) {
            data.push({
                ProductId: elm.dataset.productId,
                Quantity: elm.dataset.quantity,
                UnitId: elm.dataset.unitId,
                Rate: elm.dataset.rate,
                SubTotal: elm.dataset.subTotal,
                VATAmount: elm.dataset.vat,
                Discount: elm.dataset.dis,
                NetAmount: elm.dataset.netAmt
            });

        }

        //reuestData ko structure action ko vm sanga milnu parcha mathyko vm sanga namilda ni huncha
        const sendData = {
            SupplierId: supplierElm.value,
            PurchaseDate: purchaseDateElm.value,
            PurchaseItemVms: data
        };


        fetch('/Purchase/Add', {
            method: 'POST',
            body: JSON.stringify(sendData),
            headers: {
                'Content-Type': 'application/json'
                //add other headers if needed
            }
        }).then(res => {
            if (!res.ok) {
                throw new Error('Network response was not ok');
            }
            return res.json();
        }).then(x => {
            console.log('Server response:', x);
            if (x.success) {
                window.location.reload();
            }
            else {
                alert("Error recording purchase");
            }
        });
    });

    document.body.addEventListener('click', e => {
        let target = e.target;
        if (!target.classList.contains('i_remove')) {
            target = target.closest('.i_remove');
        }
        if (!target) return;

        e.preventDefault();

        const userAck = confirm("Are you sure you want to remove this row?");

        if (!userAck) return;

        target.closest('tr').remove();
    })

</script>